)
#dt_all <- bizseq(ymd(20140103), ymd(20181229))
#df_td_all <- tibble(trade_date = dt_all)
###################################################
## grabbing price data from yahoo with tidyquant ##
###################################################
df_underlying_px <-
tq_get("SPY", from = "2014-01-03", to = "2018-12-29")
########################################################
## grabbing volatility index from FRED with tidyquant ##
########################################################
# df_vol_index <-
#     tq_get(
#         "VIXCLS"
#         , get = "economic.data"
#         , from = "2014-01-03"
#         , to = "2018-12-29"
#     )
df_vol_index <-
read_csv("data_input/vix9ddailyprices.csv")
df_vol_index$Date <- mdy(df_vol_index$Date)
# Chunk 5
# df_chain_hist
df_td_all %>%
left_join(
df_chain_hist
, by = "trade_date"
) %>%
filter(is.na(underlying))
# Chunk 6
# df_opt_hist
df_td_all %>%
left_join(
df_opt_hist
, by = c("trade_date" = "data_date")
) %>%
filter(is.na(underlying_symbol))
# Chunk 7
df_underlying_px %>%
select(date, close) %>%
left_join(
df_opt_hist %>% select(data_date, underlying_price)
, by = c("date" = "data_date")
) %>%
filter(abs((close - underlying_price) / close) > 0.0025) %>%
group_by(date) %>%
summarize(
close = mean(close)
, underlying_price = mean(underlying_price)
) %>%
mutate(
diff = close - underlying_price
)
# Chunk 8
df_opt_hist %>%
group_by(
underlying_symbol, type, expiration, strike
) %>%
summarize(
row_count = n()
) %>%
left_join(
df_chain_desc %>% select(expiration, d2x)
, by = "expiration"
) %>%
filter(row_count != (d2x + 1))
# Chunk 9
# 1) make sure there are no chains with less than four days to expiration
df_chain_desc %>%
filter(d2x < 4)
# 2) make sure there are at least 6 options per chain
df_chain_desc %>%
filter(num_opts < 6)
# 3) make sure exec_day_volume is greater than 1000
df_chain_desc %>%
filter(exec_day_volume < 1000)
# this is the graph of execution date bid swap rates
# it's a good visual to look at, but it's hard to garner much
# data integrity
df_chain_hist %>%
left_join(
df_chain_desc %>% select(expiration, execution, realized_vol)
, by = "expiration"
) %>%
filter(trade_date == execution) %>%
ggplot() +
geom_line(aes(x=trade_date, y=bid_swap_rate), color="red") +
geom_line(aes(x=trade_date, y=realized_vol), color="blue")
# Chunk 1: setup
knitr::opts_chunk$set(
echo = TRUE
#, comment = "#>"
#, collapse = TRUE
)
options(width = 1000)
# Chunk 2
######################
## loading packages ##
######################
library(tidyverse)
library(lubridate)
library(tidyquant)
library(bizdays)
# initializing bizdays libraries
load_rmetrics_calendars(2000:2020)
bizdays.options$set(default.calendar="Rmetrics/NYSE")
# Chunk 3
#####################
## reading in data ##
#####################
df_chain_desc <-
read_csv("data_output/spy_weekly_2014_2018_chain_desc.csv")
df_chain_hist <-
read_csv("data_output/spy_weekly_2014_2018_chain_hist.csv")
df_opt_hist <-
read_csv("data_output/spy_weekly_2014_2018_opt_hist.csv")
df_pnl <-
read_csv("data_output/spy_weekly_2014_2018_pnl_master.csv")
df_trade <-
read_csv("data_output/spy_weekly_2014_2018_trade_master.csv")
# Chunk 4
#####################
## all trade dates ##
#####################
df_td_all <-
tibble(
trade_date = bizseq(from = "2014-01-03", to = "2018-12-29")
)
#dt_all <- bizseq(ymd(20140103), ymd(20181229))
#df_td_all <- tibble(trade_date = dt_all)
###################################################
## grabbing price data from yahoo with tidyquant ##
###################################################
df_underlying_px <-
tq_get("SPY", from = "2014-01-03", to = "2018-12-29")
########################################################
## grabbing volatility index from FRED with tidyquant ##
########################################################
# df_vol_index <-
#     tq_get(
#         "VIXCLS"
#         , get = "economic.data"
#         , from = "2014-01-03"
#         , to = "2018-12-29"
#     )
df_vol_index <-
read_csv("data_input/vix9ddailyprices.csv")
df_vol_index$Date <- mdy(df_vol_index$Date)
# Chunk 5
# df_chain_hist
df_td_all %>%
left_join(
df_chain_hist
, by = "trade_date"
) %>%
filter(is.na(underlying))
# Chunk 6
# df_opt_hist
df_td_all %>%
left_join(
df_opt_hist
, by = c("trade_date" = "data_date")
) %>%
filter(is.na(underlying_symbol))
# Chunk 7
df_underlying_px %>%
select(date, close) %>%
left_join(
df_opt_hist %>% select(data_date, underlying_price)
, by = c("date" = "data_date")
) %>%
filter(abs((close - underlying_price) / close) > 0.0025) %>%
group_by(date) %>%
summarize(
close = mean(close)
, underlying_price = mean(underlying_price)
) %>%
mutate(
diff = close - underlying_price
)
# Chunk 8
df_opt_hist %>%
group_by(
underlying_symbol, type, expiration, strike
) %>%
summarize(
row_count = n()
) %>%
left_join(
df_chain_desc %>% select(expiration, d2x)
, by = "expiration"
) %>%
filter(row_count != (d2x + 1))
# Chunk 9
# 1) make sure there are no chains with less than four days to expiration
df_chain_desc %>%
filter(d2x < 4)
# 2) make sure there are at least 6 options per chain
df_chain_desc %>%
filter(num_opts < 6)
# 3) make sure exec_day_volume is greater than 1000
df_chain_desc %>%
filter(exec_day_volume < 1000)
# this is the graph of execution date bid swap rates
# it's a good visual to look at, but it's hard to garner much
# data integrity
df_chain_hist %>%
left_join(
df_chain_desc %>% select(expiration, execution, realized_vol)
, by = "expiration"
) %>%
filter(trade_date == execution) %>%
ggplot() +
geom_line(aes(x=trade_date, y=bid_swap_rate), color="red") +
geom_line(aes(x=trade_date, y=realized_vol), color="blue")
df_chain_hist %>%
left_join(
df_chain_desc %>% select(expiration, execution, realized_vol)
, by = "expiration"
) %>%
filter(trade_date == execution) %>%
ggplot() +
geom_line(aes(x=trade_date, y=bid_swap_rate), color="red") +
geom_line(aes(x=trade_date, y=realized_vol), color="blue")
help(knitr::kable)
help(kable)
unlink('testing/weekly_option_data_integrity_test_cache', recursive = TRUE)
unlink('testing/weekly_option_data_integrity_test_cache', recursive = TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(
echo = TRUE
#, comment = "#>"
#, collapse = TRUE
)
options(width = 100)
# Chunk 2
######################
## loading packages ##
######################
library(tidyverse)
library(lubridate)
library(tidyquant)
library(bizdays)
# initializing bizdays libraries
load_rmetrics_calendars(2000:2020)
bizdays.options$set(default.calendar="Rmetrics/NYSE")
# Chunk 3
#####################
## reading in data ##
#####################
df_chain_desc <-
read_csv("data_output/spy_weekly_2014_2018_chain_desc.csv")
df_chain_hist <-
read_csv("data_output/spy_weekly_2014_2018_chain_hist.csv")
df_opt_hist <-
read_csv("data_output/spy_weekly_2014_2018_opt_hist.csv")
df_pnl <-
read_csv("data_output/spy_weekly_2014_2018_pnl_master.csv")
df_trade <-
read_csv("data_output/spy_weekly_2014_2018_trade_master.csv")
# Chunk 4
#####################
## all trade dates ##
#####################
df_td_all <-
tibble(
trade_date = bizseq(from = "2014-01-03", to = "2018-12-29")
)
#dt_all <- bizseq(ymd(20140103), ymd(20181229))
#df_td_all <- tibble(trade_date = dt_all)
###################################################
## grabbing price data from yahoo with tidyquant ##
###################################################
df_underlying_px <-
tq_get("SPY", from = "2014-01-03", to = "2018-12-29")
########################################################
## grabbing volatility index from FRED with tidyquant ##
########################################################
# df_vol_index <-
#     tq_get(
#         "VIXCLS"
#         , get = "economic.data"
#         , from = "2014-01-03"
#         , to = "2018-12-29"
#     )
df_vol_index <-
read_csv("data_input/vix9ddailyprices.csv")
df_vol_index$Date <- mdy(df_vol_index$Date)
# Chunk 5
# df_chain_hist
df_td_all %>%
left_join(
df_chain_hist
, by = "trade_date"
) %>%
filter(is.na(underlying))
# Chunk 6
# df_opt_hist
df_td_all %>%
left_join(
df_opt_hist
, by = c("trade_date" = "data_date")
) %>%
filter(is.na(underlying_symbol))
# Chunk 7
df_underlying_px %>%
select(date, close) %>%
left_join(
df_opt_hist %>% select(data_date, underlying_price)
, by = c("date" = "data_date")
) %>%
filter(abs((close - underlying_price) / close) > 0.0025) %>%
group_by(date) %>%
summarize(
close = mean(close)
, underlying_price = mean(underlying_price)
) %>%
mutate(
diff = close - underlying_price
)
# Chunk 8
df_opt_hist %>%
group_by(
underlying_symbol, type, expiration, strike
) %>%
summarize(
row_count = n()
) %>%
left_join(
df_chain_desc %>% select(expiration, d2x)
, by = "expiration"
) %>%
filter(row_count != (d2x + 1))
# Chunk 9
# 1) make sure there are no chains with less than four days to expiration
df_chain_desc %>%
filter(d2x < 4)
# 2) make sure there are at least 6 options per chain
df_chain_desc %>%
filter(num_opts < 6)
# 3) make sure exec_day_volume is greater than 1000
df_chain_desc %>%
filter(exec_day_volume < 1000)
# Chunk 10
# this is the graph of execution date bid swap rates
# it's a good visual to look at, but it's hard to garner much
# data integrity
df_chain_hist %>%
left_join(
df_chain_desc %>% select(expiration, execution, realized_vol)
, by = "expiration"
) %>%
filter(trade_date == execution) %>%
ggplot() +
geom_line(aes(x=trade_date, y=bid_swap_rate), color="red") +
geom_line(aes(x=trade_date, y=realized_vol), color="blue")
# Chunk 11
# lining up realized volatility and implied volatility by expiration
df_real_iv_comparison <-
df_chain_hist %>%
left_join(
df_chain_desc %>%
select(expiration, execution, realized_vol, return)
, by = "expiration"
) %>%
filter(trade_date == execution) %>%
select(
expiration, execution, bid_swap_rate, realized_vol, return
) %>%
mutate(
realized_change = realized_vol - lag(realized_vol)
, iv_change = bid_swap_rate - lag(bid_swap_rate)
)
# looking at the subsequent change in vol for each expiration
df_real_iv_comparison <-
df_real_iv_comparison %>%
mutate(
subseq_iv_change = lead(iv_change)
)
# There shouldn't be too many of these:
# (1) a sizeable jump in realized vol (> 5%)
# (2) the underlying experienced a loss during the expiration (< 0%)
# (3) a sizeable drop in implied vol (< -2%)
df_real_iv_comparison %>%
filter(realized_change > 0.05) %>%
filter(return < 0) %>%
filter(subseq_iv_change < -0.02)
# Chunk 12
###############################################################
## checking the bid-IVs are consistent with volatility index ##
###############################################################
df_index_comparison <-
df_chain_hist %>%
select(underlying, expiration, trade_date, bid_swap_rate) %>%
left_join(
df_chain_desc %>%
select(expiration, execution, realized_vol, return)
, by = "expiration"
) %>%
filter(trade_date == execution) %>%
left_join(
df_vol_index %>%
mutate(vol_index = Close / 100) %>%
select(Date, vol_index)
, by = c("trade_date" = "Date")
)
# calculating the difference between the bid swap rate and the vol_index
df_index_comparison <-
df_index_comparison %>%
mutate(vol_diff = bid_swap_rate - vol_index)
# difference between bid_swap_rate and vol_index is greater than 0.05
df_index_comparison %>%
filter(abs(vol_diff) > 0.05)
# Chunk 13
# premium by expiration
df_prem_exp <-
df_trade %>%
filter(variation == 0.1) %>%
group_by(
underlying_symbol
, expiration
) %>%
summarize(
premium = sum(bid)
)
# pnl by expiration
df_pnl_exp <-
df_pnl %>%
filter(variation == 0.1) %>%
group_by(
underlying_symbol
, expiration
) %>%
summarize(
pnl = sum(dly_tot_pnl)
)
# premium recieved and dh pnl for each expiration
df_prem_vs_pnl <-
df_prem_exp %>%
left_join(
df_pnl_exp
, by = c("underlying_symbol", "expiration")
)
# for each expiration, the bid swap rate and the realized vol
df_vol_prem <-
df_chain_desc %>%
select(underlying, expiration, execution, realized_vol) %>%
left_join(
df_chain_hist %>%
select(underlying, expiration, trade_date, bid_swap_rate)
, by = c("underlying", "expiration")
) %>%
filter(trade_date == execution) %>%
select(underlying, expiration, realized_vol, bid_swap_rate) %>%
mutate(
vol_prem = bid_swap_rate - realized_vol
)
# a final report that puts together all the numbers that we are
# interested in
df_report <-
df_prem_vs_pnl %>%
left_join(
df_vol_prem
, by = c("underlying_symbol" = "underlying", "expiration")
) %>%
mutate(
pnl_ratio = pnl / premium
)
# Chunk 14
# scatter plot of vol-premium vs PNL ratio
df_report %>%
ggplot() +
geom_point(aes(x = vol_prem, y = pnl_ratio))
# Chunk 15
df_report %>%
filter(
(vol_prem > 0 & pnl_ratio > 0) |
(vol_prem < 0 & pnl_ratio < 0)
) %>%
head(5)
# Chunk 16
# should have been winners but they were losers
df_report %>%
filter(vol_prem > 0 & pnl_ratio < 0) %>%
arrange(pnl_ratio)
df_report %>%
filter(vol_prem > 0 & pnl_ratio < 0) %>%
top_n(pnl_ratio, -1)
df_report
df_report %>%
filter(vol_prem > 0 & pnl_ratio < 0) %>%
top_n(-1, pnl_ratio)
unlink('testing/weekly_option_data_integrity_test_cache', recursive = TRUE)
dt_worst_should_be_winner
dt_worst_should_be_winner <-
df_report %>%
filter(vol_prem > 0 & pnl_ratio < 0) %>%
top_n(-1, pnl_ratio) %>%
.$expiration[1]
dt_worst_should_be_winner
dt_worst_should_be_winner <-
df_report %>%
filter(vol_prem > 0 & pnl_ratio < 0) %>%
top_n(-1, pnl_ratio) %>%
.$expiration %>%
`[`(1)
dt_worst_should_be_winner
unlink('testing/weekly_option_data_integrity_test_cache', recursive = TRUE)
df_pnl %>%
filter(variation == 0.1) %>%
filter(expiration == dt_worst_should_be_winner)
unlink('testing/weekly_option_data_integrity_test_cache', recursive = TRUE)
